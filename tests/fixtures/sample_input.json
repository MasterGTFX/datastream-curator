{
  "project": "datastream-curator",
  "version": "0.1.0",
  "description": "AI-powered incremental data curation and knowledge base management",
  "features": [
    {
      "name": "LLM Integration",
      "description": "Connect to various LLM providers including OpenRouter and OpenAI",
      "status": "implemented",
      "components": ["llm.py", "config.py"]
    },
    {
      "name": "Diff Engine",
      "description": "Apply structured changes to markdown documents",
      "status": "implemented",
      "components": ["diff.py"]
    },
    {
      "name": "Configuration Management",
      "description": "Flexible configuration with YAML files and environment variables",
      "status": "implemented",
      "components": ["config.py"]
    },
    {
      "name": "Async Processing",
      "description": "High-performance asynchronous data processing",
      "status": "implemented",
      "components": ["core.py", "llm.py"]
    }
  ],
  "dependencies": {
    "runtime": {
      "pydantic": ">=2.5.0",
      "aiohttp": ">=3.9.0",
      "pyyaml": ">=6.0.1",
      "click": ">=8.1.0",
      "rich": ">=13.7.0",
      "orjson": ">=3.9.0"
    },
    "development": {
      "pytest": ">=7.4.0",
      "pytest-asyncio": ">=0.21.0",
      "pytest-mock": ">=3.12.0",
      "pytest-cov": ">=4.1.0",
      "black": ">=23.12.0",
      "ruff": ">=0.1.0",
      "mypy": ">=1.8.0"
    }
  },
  "architecture": {
    "core_components": [
      {
        "name": "DataStreamCurator",
        "file": "core.py",
        "description": "Main class for data curation operations"
      },
      {
        "name": "LLMClient",
        "file": "llm.py", 
        "description": "Async client for LLM API interactions"
      },
      {
        "name": "DiffEngine",
        "file": "diff.py",
        "description": "Handles diff generation and application"
      },
      {
        "name": "CurationConfig",
        "file": "config.py",
        "description": "Configuration management with validation"
      }
    ]
  },
  "usage_examples": [
    {
      "name": "Basic Usage",
      "code": "from datastream_curator import DataStreamCurator\n\ncurator = DataStreamCurator()\nresult = await curator.process(input_data, output_path)",
      "description": "Simple data curation workflow"
    },
    {
      "name": "Batch Processing",
      "code": "result = await curator.process_batch(input_files, output_path)",
      "description": "Process multiple files in sequence"
    },
    {
      "name": "Custom Configuration",
      "code": "config = CurationConfig.from_file('config.yaml')\ncurator = DataStreamCurator(config)",
      "description": "Using custom configuration file"
    }
  ],
  "test_coverage": {
    "target": "95%",
    "categories": [
      "unit_tests",
      "integration_tests", 
      "mock_tests",
      "error_handling_tests"
    ]
  }
}